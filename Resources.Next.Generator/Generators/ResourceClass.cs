using System;
using System.Collections.Generic;
using System.Linq;
using Resources.Next.Shared;

// ReSharper disable UseRawString

namespace Resources.Next.Generator.Generators;

internal static class ResourceClass
{
    internal static string Generate(
        string className,
        string filePath,
        ResourceConfigurationInternal configuration,
        IReadOnlyCollection<Resource> resources,
        ResourcesGenerationKind kind) =>
        Generate(
            className, 
            filePath,
            configuration,
            GenerateFindMethod(resources),
            string.Join("\n", resources.Select(x => GenerateResource(x, kind))),
            null);

    internal static string GenerateError(
        string className,
        string filePath,
        ResourceConfigurationInternal configuration,
        Exception ex)
    {
        var errorMessage = $"There was en error when generating this resource: {ex.Message}";

        return Generate(
            className,
            filePath,
            configuration,
            $"\n\t\tthrow new InvalidOperationException(\"{errorMessage}\");",
            null,
            $"\n[Obsolete(\"{errorMessage}\")]");
    }
    
    private static string GenerateFindMethod(IEnumerable<Resource> resources) => 
        @$"key switch
    {{
{string.Concat(resources.Select(x => $"\t\t\"{x.Name}\" => {x.Name},\n"))}
        _ => null
    }};
";

    private static string Generate(
        string className,
        string filePath,
        ResourceConfigurationInternal configuration,
        string findMethod,
        string? resourceProperties,
        string? attribute) =>
        $@"// <auto-generated/>
#nullable enable

using Resources.Next;
using Resources.Next.Core;
using System.Collections.Generic;
using System.Collections.Frozen;
using System.Globalization;
using System.Threading;
using System;

namespace Resources.Next.Generated;

/// <summary>
/// An <see cref=""IResourceProvider""/> created from file
/// <code>{filePath}</code>
/// with options
/// <code>
/// {nameof(ResourcesNextConfigurationAttribute.Kind)}: {configuration.Kind}
/// {nameof(ResourcesNextConfigurationAttribute.Separator)}: {configuration.Separator}
/// {nameof(ResourcesNextConfigurationAttribute.NameColumn)}: {configuration.NameColumn}
/// {nameof(ResourcesNextConfigurationAttribute.CommentPrefix)}: {configuration.CommentPrefix}
/// </code>
/// </summary>{attribute}
public class {className} : IResourceProvider
{{
    private {className}() {{}}
    public static LocalizedResource? Find(string key) => {findMethod}
{resourceProperties}
}}";
    
    // ReSharper disable once SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault
    private static string GenerateResource(Resource resource, ResourcesGenerationKind kind) => kind switch
    {
        ResourcesGenerationKind.Dictionary => DictionaryResource.Generate(resource),
        ResourcesGenerationKind.Functional => FunctionalResource.Generate(resource),
        _ => throw new InvalidOperationException()
    };
}